var org_example_genericmodel1_0_Module_Factory = function () {
  var org_example_genericmodel1_0 = {
    name: 'org_example_genericmodel1_0',
    defaultElementNamespaceURI: 'http:\/\/www.example.org\/GenericModel1.0.3',
    typeInfos: [{
        localName: 'Contact',
        propertyInfos: [{
            name: 'title',
            elementName: 'Title'
          }, {
            name: 'familyName',
            elementName: 'FamilyName'
          }, {
            name: 'givenName',
            elementName: 'GivenName'
          }, {
            name: 'email',
            required: true,
            elementName: 'Email'
          }, {
            name: 'telephone',
            elementName: 'Telephone'
          }, {
            name: 'streetAddress',
            elementName: 'StreetAddress'
          }, {
            name: 'country',
            elementName: 'Country'
          }, {
            name: 'city',
            elementName: 'City'
          }, {
            name: 'zipCode',
            elementName: 'ZipCode'
          }, {
            name: 'region',
            elementName: 'Region'
          }, {
            name: 'timezone',
            elementName: 'Timezone'
          }, {
            name: 'gender',
            elementName: 'Gender'
          }, {
            name: 'note',
            elementName: 'Note'
          }, {
            name: 'organization',
            elementName: 'Organization'
          }]
      }, {
        localName: 'SpatialInformation',
        propertyInfos: [{
            name: 'region',
            elementName: 'Region'
          }, {
            name: 'country',
            elementName: 'Country'
          }]
      }, {
        localName: 'Reference',
        propertyInfos: [{
            name: 'isReferenceDescription',
            required: true,
            elementName: 'IsReferenceDescription',
            typeInfo: 'Boolean'
          }, {
            name: 'type',
            elementName: 'Type',
            values: ['ABST', 'ADVS', 'AGGR', 'ANCIENT', 'ART', 'BILL', 'BLOG', 'BOOK', 'CASE', 'CHAP', 'CHART', 'CLSWK', 'COMP', 'CONF', 'CPAPER', 'CTLG', 'DATA', 'DBASE', 'DICT', 'EBOOK', 'ECHAP', 'EDBOOK', 'EJOUR', 'ELECT', 'ENCYC', 'EQUA', 'FIGURE', 'GEN', 'GOVDOC', 'GRANT', 'HEAR', 'ICOMM', 'INPR', 'JOUR', 'JFULL', 'LEGAL', 'MANSCPT', 'MAP', 'MGZN', 'MPCT', 'MULTI', 'MUSIC', 'NEW', 'PAMP', 'PAT', 'PCOMM', 'RPRT', 'SER', 'SLIDE', 'SOUND', 'STAND', 'STAT', 'THES', 'UNPB', 'VIDEO']
          }, {
            name: 'date',
            elementName: 'Date'
          }, {
            name: 'pmid',
            elementName: 'Pmid'
          }, {
            name: 'doi',
            elementName: 'Doi'
          }, {
            name: 'authorList',
            elementName: 'AuthorList'
          }, {
            name: 'title',
            required: true,
            elementName: 'Title'
          }, {
            name: '_abstract',
            elementName: 'Abstract'
          }, {
            name: 'journal',
            elementName: 'Journal'
          }, {
            name: 'volume',
            elementName: 'Volume',
            typeInfo: 'Int'
          }, {
            name: 'issue',
            elementName: 'Issue',
            typeInfo: 'Int'
          }, {
            name: 'status',
            elementName: 'Status'
          }, {
            name: 'website',
            elementName: 'Website'
          }, {
            name: 'comment',
            elementName: 'Comment'
          }]
      }, {
        localName: 'QualityMeasures',
        propertyInfos: [{
            name: 'sse',
            elementName: 'SSE',
            typeInfo: 'Double'
          }, {
            name: 'mse',
            elementName: 'MSE',
            typeInfo: 'Double'
          }, {
            name: 'rmse',
            elementName: 'RMSE',
            typeInfo: 'Double'
          }, {
            name: 'rSquared',
            elementName: 'RSquared',
            typeInfo: 'Double'
          }, {
            name: 'aic',
            elementName: 'AIC',
            typeInfo: 'Double'
          }, {
            name: 'bic',
            elementName: 'BIC',
            typeInfo: 'Double'
          }]
      }, {
        localName: 'Document.GenericModel.Scope.Product',
        typeName: null,
        propertyInfos: [{
            name: 'name',
            required: true,
            elementName: 'Name'
          }, {
            name: 'description',
            elementName: 'Description'
          }, {
            name: 'unit',
            elementName: 'Unit'
          }, {
            name: 'method',
            elementName: 'Method'
          }, {
            name: 'packaging',
            elementName: 'Packaging'
          }, {
            name: 'treatment',
            elementName: 'Treatment'
          }, {
            name: 'originCountry',
            elementName: 'OriginCountry'
          }, {
            name: 'originArea',
            elementName: 'OriginArea'
          }, {
            name: 'fisheriesArea',
            elementName: 'FisheriesArea'
          }, {
            name: 'productionDate',
            elementName: 'ProductionDate',
            typeInfo: 'Date'
          }, {
            name: 'expiryDate',
            elementName: 'ExpiryDate',
            typeInfo: 'Date'
          }]
      }, {
        localName: 'Document',
        typeName: null,
        propertyInfos: [{
            name: 'genericModel',
            required: true,
            elementName: 'GenericModel',
            typeInfo: '.Document.GenericModel'
          }, {
            name: 'doseResponseModel',
            required: true,
            elementName: 'DoseResponseModel',
            typeInfo: '.Document.DoseResponseModel'
          }]
      }, {
        localName: 'PopulationGroup',
        propertyInfos: [{
            name: 'name',
            required: true,
            elementName: 'Name'
          }, {
            name: 'targetPopulation',
            elementName: 'TargetPopulation'
          }, {
            name: 'populationSpan',
            minOccurs: 0,
            collection: true,
            elementName: 'PopulationSpan'
          }, {
            name: 'populationDescription',
            minOccurs: 0,
            collection: true,
            elementName: 'PopulationDescription'
          }, {
            name: 'populationAge',
            minOccurs: 0,
            collection: true,
            elementName: 'PopulationAge'
          }, {
            name: 'populationGender',
            elementName: 'PopulationGender'
          }, {
            name: 'bmi',
            minOccurs: 0,
            collection: true,
            elementName: 'BMI'
          }, {
            name: 'specialDietGroups',
            minOccurs: 0,
            collection: true,
            elementName: 'SpecialDietGroups'
          }, {
            name: 'patternConsumption',
            minOccurs: 0,
            collection: true,
            elementName: 'PatternConsumption'
          }, {
            name: 'region',
            minOccurs: 0,
            collection: true,
            elementName: 'Region'
          }, {
            name: 'country',
            minOccurs: 0,
            collection: true,
            elementName: 'Country'
          }, {
            name: 'populationRiskFactor',
            minOccurs: 0,
            collection: true,
            elementName: 'PopulationRiskFactor'
          }, {
            name: 'season',
            minOccurs: 0,
            collection: true,
            elementName: 'Season'
          }]
      }, {
        localName: 'Document.GenericModel',
        typeName: null,
        propertyInfos: [{
            name: 'generalInformation',
            required: true,
            elementName: 'GeneralInformation',
            typeInfo: '.Document.GenericModel.GeneralInformation'
          }, {
            name: 'scope',
            elementName: 'Scope',
            typeInfo: '.Document.GenericModel.Scope'
          }, {
            name: 'dataBackground',
            elementName: 'DataBackground',
            typeInfo: '.Document.GenericModel.DataBackground'
          }, {
            name: 'modelMath',
            elementName: 'ModelMath',
            typeInfo: '.Document.GenericModel.ModelMath'
          }]
      }, {
        localName: 'ModelCategory',
        propertyInfos: [{
            name: 'modelClass',
            required: true,
            elementName: 'ModelClass'
          }, {
            name: 'modelSubClass',
            elementName: 'ModelSubClass'
          }, {
            name: 'modelClassComment',
            elementName: 'ModelClassComment'
          }, {
            name: 'basicProcess',
            elementName: 'BasicProcess'
          }]
      }, {
        localName: 'Document.DoseResponseModel.GeneralInformation',
        typeName: null,
        propertyInfos: [{
            name: 'modelName',
            required: true,
            elementName: 'ModelName'
          }, {
            name: 'source',
            elementName: 'Source'
          }, {
            name: 'identifier',
            required: true,
            elementName: 'Identifier'
          }, {
            name: 'author',
            minOccurs: 0,
            collection: true,
            elementName: 'Author',
            typeInfo: '.Contact'
          }, {
            name: 'creator',
            required: true,
            collection: true,
            elementName: 'Creator',
            typeInfo: '.Contact'
          }, {
            name: 'creationDate',
            required: true,
            elementName: 'CreationDate',
            typeInfo: 'Date'
          }, {
            name: 'modificationDate',
            minOccurs: 0,
            collection: true,
            elementName: 'ModificationDate',
            typeInfo: 'Date'
          }, {
            name: 'rights',
            required: true,
            elementName: 'Rights'
          }, {
            name: 'available',
            elementName: 'Available',
            typeInfo: 'Boolean'
          }, {
            name: 'format',
            elementName: 'Format'
          }, {
            name: 'reference',
            required: true,
            collection: true,
            elementName: 'Reference',
            typeInfo: '.Reference'
          }, {
            name: 'language',
            elementName: 'Language'
          }, {
            name: 'software',
            elementName: 'Software'
          }, {
            name: 'languageWrittenIn',
            required: true,
            elementName: 'LanguageWrittenIn'
          }, {
            name: 'modelCategory',
            elementName: 'ModelCategory',
            typeInfo: '.ModelCategory'
          }, {
            name: 'status',
            elementName: 'Status'
          }, {
            name: 'objective',
            elementName: 'Objective'
          }, {
            name: 'description',
            elementName: 'Description'
          }]
      }, {
        localName: 'Document.GenericModel.DataBackground',
        typeName: null,
        propertyInfos: [{
            name: 'study',
            elementName: 'Study',
            typeInfo: '.Study'
          }, {
            name: 'studySample',
            minOccurs: 0,
            collection: true,
            elementName: 'StudySample',
            typeInfo: '.StudySample'
          }, {
            name: 'dietaryAssessmentMethod',
            minOccurs: 0,
            collection: true,
            elementName: 'DietaryAssessmentMethod',
            typeInfo: '.Document.GenericModel.DataBackground.DietaryAssessmentMethod'
          }, {
            name: 'laboratory',
            minOccurs: 0,
            collection: true,
            elementName: 'Laboratory',
            typeInfo: '.Laboratory'
          }, {
            name: 'assay',
            minOccurs: 0,
            collection: true,
            elementName: 'Assay',
            typeInfo: '.Assay'
          }]
      }, {
        localName: 'Document.GenericModel.DataBackground.DietaryAssessmentMethod',
        typeName: null,
        propertyInfos: [{
            name: 'collectionTool',
            elementName: 'CollectionTool'
          }, {
            name: 'numberOfNonConsecutiveOneDay',
            elementName: 'NumberOfNonConsecutiveOneDay'
          }, {
            name: 'softwareTool',
            elementName: 'SoftwareTool'
          }, {
            name: 'numberOfFoodItems',
            elementName: 'NumberOfFoodItems'
          }, {
            name: 'recordTypes',
            elementName: 'RecordTypes'
          }, {
            name: 'foodDescriptors',
            elementName: 'FoodDescriptors'
          }]
      }, {
        localName: 'Document.DoseResponseModel.DataBackground',
        typeName: null,
        propertyInfos: [{
            name: 'study',
            required: true,
            elementName: 'Study',
            typeInfo: '.Study'
          }, {
            name: 'studySample',
            minOccurs: 0,
            collection: true,
            elementName: 'StudySample',
            typeInfo: '.StudySample'
          }, {
            name: 'laboratory',
            minOccurs: 0,
            collection: true,
            elementName: 'Laboratory',
            typeInfo: '.Laboratory'
          }, {
            name: 'assay',
            minOccurs: 0,
            collection: true,
            elementName: 'Assay',
            typeInfo: '.Assay'
          }]
      }, {
        localName: 'StudySample',
        propertyInfos: [{
            name: 'sampleName',
            required: true,
            elementName: 'SampleName'
          }, {
            name: 'protocolOfSampleCollection',
            required: true,
            elementName: 'ProtocolOfSampleCollection'
          }, {
            name: 'samplingStrategy',
            elementName: 'SamplingStrategy'
          }, {
            name: 'typeOfSamplingProgram',
            elementName: 'TypeOfSamplingProgram'
          }, {
            name: 'samplingMethod',
            elementName: 'SamplingMethod'
          }, {
            name: 'samplingPlan',
            required: true,
            elementName: 'SamplingPlan'
          }, {
            name: 'samplingWeight',
            required: true,
            elementName: 'SamplingWeight'
          }, {
            name: 'samplingSize',
            required: true,
            elementName: 'SamplingSize'
          }, {
            name: 'lotSizeUnit',
            elementName: 'LotSizeUnit'
          }, {
            name: 'samplingPoint',
            required: true,
            elementName: 'SamplingPoint'
          }]
      }, {
        localName: 'Study',
        propertyInfos: [{
            name: 'identifier',
            elementName: 'Identifier'
          }, {
            name: 'title',
            required: true,
            elementName: 'Title'
          }, {
            name: 'description',
            elementName: 'Description'
          }, {
            name: 'designType',
            elementName: 'DesignType'
          }, {
            name: 'assayMeasurementType',
            elementName: 'AssayMeasurementType'
          }, {
            name: 'assayTechnologyType',
            elementName: 'AssayTechnologyType'
          }, {
            name: 'assayTechnologyPlatform',
            elementName: 'AssayTechnologyPlatform'
          }, {
            name: 'assayTechnologyTypePlatform',
            elementName: 'AssayTechnologyTypePlatform'
          }, {
            name: 'accreditationProcedureForTheAssayTechnology',
            elementName: 'AccreditationProcedureForTheAssayTechnology'
          }, {
            name: 'protocolName',
            elementName: 'ProtocolName'
          }, {
            name: 'protocolType',
            elementName: 'ProtocolType'
          }, {
            name: 'protocolDescription',
            elementName: 'ProtocolDescription'
          }, {
            name: 'protocolURI',
            elementName: 'ProtocolURI'
          }, {
            name: 'protocolVersion',
            elementName: 'ProtocolVersion'
          }, {
            name: 'protocolParametersName',
            elementName: 'ProtocolParametersName'
          }, {
            name: 'protocolComponentsName',
            elementName: 'ProtocolComponentsName'
          }, {
            name: 'protocolComponentsType',
            elementName: 'ProtocolComponentsType'
          }]
      }, {
        localName: 'ModelEquation',
        propertyInfos: [{
            name: 'name',
            required: true,
            elementName: 'Name'
          }, {
            name: 'clazz',
            elementName: 'Class'
          }, {
            name: 'modelEquation',
            required: true,
            elementName: 'ModelEquation'
          }, {
            name: 'reference',
            minOccurs: 0,
            collection: true,
            elementName: 'Reference',
            typeInfo: '.Reference'
          }, {
            name: 'modelHypothesis',
            minOccurs: 0,
            collection: true,
            elementName: 'ModelHypothesis'
          }]
      }, {
        localName: 'Document.GenericModel.ModelMath',
        typeName: null,
        propertyInfos: [{
            name: 'parameter',
            required: true,
            collection: true,
            elementName: 'Parameter',
            typeInfo: '.Parameter'
          }, {
            name: 'qualityMeasures',
            elementName: 'QualityMeasures',
            typeInfo: '.QualityMeasures'
          }, {
            name: 'modelEquation',
            elementName: 'ModelEquation',
            typeInfo: '.ModelEquation'
          }, {
            name: 'fittingProcedure',
            elementName: 'FittingProcedure'
          }, {
            name: 'exposure',
            elementName: 'Exposure',
            typeInfo: '.Exposure'
          }, {
            name: 'event',
            elementName: 'Event'
          }]
      }, {
        localName: 'Document.GenericModel.Scope',
        typeName: null,
        propertyInfos: [{
            name: 'product',
            minOccurs: 0,
            collection: true,
            elementName: 'Product',
            typeInfo: '.Document.GenericModel.Scope.Product'
          }, {
            name: 'hazard',
            minOccurs: 0,
            collection: true,
            elementName: 'Hazard',
            typeInfo: '.Hazard'
          }, {
            name: 'populationGroup',
            minOccurs: 0,
            collection: true,
            elementName: 'PopulationGroup',
            typeInfo: '.PopulationGroup'
          }, {
            name: 'generalComment',
            elementName: 'GeneralComment'
          }, {
            name: 'temporalInformation',
            elementName: 'TemporalInformation'
          }, {
            name: 'spatialInformation',
            elementName: 'SpatialInformation',
            typeInfo: '.SpatialInformation'
          }]
      }, {
        localName: 'Document.DoseResponseModel.Scope',
        typeName: null,
        propertyInfos: [{
            name: 'hazard',
            required: true,
            collection: true,
            elementName: 'Hazard',
            typeInfo: '.Hazard'
          }, {
            name: 'populationGroup',
            required: true,
            collection: true,
            elementName: 'PopulationGroup',
            typeInfo: '.PopulationGroup'
          }, {
            name: 'generalComment',
            elementName: 'GeneralComment'
          }, {
            name: 'temporalInformation',
            elementName: 'TemporalInformation'
          }, {
            name: 'spatialInformation',
            elementName: 'SpatialInformation',
            typeInfo: '.SpatialInformation'
          }]
      }, {
        localName: 'Document.DoseResponseModel',
        typeName: null,
        propertyInfos: [{
            name: 'generalInformation',
            required: true,
            elementName: 'GeneralInformation',
            typeInfo: '.Document.DoseResponseModel.GeneralInformation'
          }, {
            name: 'scope',
            required: true,
            elementName: 'Scope',
            typeInfo: '.Document.DoseResponseModel.Scope'
          }, {
            name: 'dataBackground',
            required: true,
            elementName: 'DataBackground',
            typeInfo: '.Document.DoseResponseModel.DataBackground'
          }, {
            name: 'modelMath',
            required: true,
            elementName: 'ModelMath',
            typeInfo: '.Document.DoseResponseModel.ModelMath'
          }]
      }, {
        localName: 'Laboratory',
        propertyInfos: [{
            name: 'accreditation',
            elementName: 'Accreditation'
          }, {
            name: 'name',
            elementName: 'Name'
          }, {
            name: 'country',
            minOccurs: 0,
            collection: true,
            elementName: 'Country'
          }]
      }, {
        localName: 'Assay',
        propertyInfos: [{
            name: 'name',
            required: true,
            elementName: 'Name'
          }, {
            name: 'description',
            elementName: 'Description'
          }, {
            name: 'moisturePercentage',
            elementName: 'MoisturePercentage'
          }, {
            name: 'fatPercentage',
            elementName: 'FatPercentage'
          }, {
            name: 'detectionLimit',
            elementName: 'DetectionLimit'
          }, {
            name: 'quantificationLimit',
            elementName: 'QuantificationLimit'
          }, {
            name: 'leftCensoredData',
            elementName: 'LeftCensoredData'
          }, {
            name: 'contaminationRange',
            elementName: 'ContaminationRange'
          }, {
            name: 'uncertaintyValue',
            elementName: 'UncertaintyValue'
          }]
      }, {
        localName: 'Exposure',
        propertyInfos: [{
            name: 'type',
            required: true,
            elementName: 'Type'
          }, {
            name: 'uncertaintyEstimation',
            elementName: 'UncertaintyEstimation'
          }, {
            name: 'methodologicalTreatmentOfLeftCensoredData',
            minOccurs: 0,
            collection: true,
            elementName: 'MethodologicalTreatmentOfLeftCensoredData'
          }, {
            name: 'levelOfContaminationAfterLeftCensoredDataTreatment',
            minOccurs: 0,
            collection: true,
            elementName: 'LevelOfContaminationAfterLeftCensoredDataTreatment'
          }, {
            name: 'scenario',
            minOccurs: 0,
            collection: true,
            elementName: 'Scenario'
          }]
      }, {
        localName: 'Parameter',
        propertyInfos: [{
            name: 'id',
            required: true,
            elementName: 'Id'
          }, {
            name: 'classification',
            required: true,
            elementName: 'Classification',
            values: ['constant', 'input', 'output']
          }, {
            name: 'name',
            required: true,
            elementName: 'Name'
          }, {
            name: 'description',
            elementName: 'Description'
          }, {
            name: 'unit',
            required: true,
            elementName: 'Unit'
          }, {
            name: 'unitCategory',
            elementName: 'UnitCategory'
          }, {
            name: 'dataType',
            elementName: 'DataType',
            values: ['integer', 'double', 'number', 'date', 'file', 'boolean', 'vectorOfNumbers', 'vectorOfStrings', 'matrixOfNumbers', 'matrixOfStrings', 'object', 'string']
          }, {
            name: 'source',
            elementName: 'Source'
          }, {
            name: 'subject',
            elementName: 'Subject'
          }, {
            name: 'distribution',
            elementName: 'Distribution'
          }, {
            name: 'value',
            elementName: 'Value'
          }, {
            name: 'reference',
            minOccurs: 0,
            collection: true,
            elementName: 'Reference',
            typeInfo: '.Reference'
          }, {
            name: 'variabilitySubject',
            elementName: 'VariabilitySubject'
          }, {
            name: 'minValue',
            elementName: 'MinValue'
          }, {
            name: 'maxValue',
            elementName: 'MaxValue'
          }, {
            name: 'error',
            elementName: 'Error'
          }]
      }, {
        localName: 'Document.DoseResponseModel.ModelMath',
        typeName: null,
        propertyInfos: [{
            name: 'parameter',
            required: true,
            collection: true,
            elementName: 'Parameter',
            typeInfo: '.Parameter'
          }, {
            name: 'qualityMeasures',
            elementName: 'QualityMeasures',
            typeInfo: '.QualityMeasures'
          }, {
            name: 'modelEquation',
            elementName: 'ModelEquation',
            typeInfo: '.ModelEquation'
          }, {
            name: 'fittingProcedure',
            elementName: 'FittingProcedure'
          }, {
            name: 'exposure',
            elementName: 'Exposure',
            typeInfo: '.Exposure'
          }, {
            name: 'event',
            elementName: 'Event'
          }]
      }, {
        localName: 'Document.GenericModel.GeneralInformation',
        typeName: null,
        propertyInfos: [{
            name: 'name',
            required: true,
            elementName: 'Name'
          }, {
            name: 'source',
            elementName: 'Source'
          }, {
            name: 'identifier',
            required: true,
            elementName: 'Identifier'
          }, {
            name: 'author',
            required: true,
            elementName: 'Author',
            typeInfo: '.Contact'
          }, {
            name: 'creator',
            minOccurs: 0,
            collection: true,
            elementName: 'Creator',
            typeInfo: '.Contact'
          }, {
            name: 'creationDate',
            required: true,
            elementName: 'CreationDate',
            typeInfo: 'Date'
          }, {
            name: 'modificationDate',
            elementName: 'ModificationDate',
            typeInfo: 'Date'
          }, {
            name: 'rights',
            required: true,
            elementName: 'Rights'
          }, {
            name: 'available',
            elementName: 'Available',
            typeInfo: 'Boolean'
          }, {
            name: 'format',
            elementName: 'Format'
          }, {
            name: 'reference',
            required: true,
            collection: true,
            elementName: 'Reference',
            typeInfo: '.Reference'
          }, {
            name: 'language',
            elementName: 'Language'
          }, {
            name: 'software',
            elementName: 'Software'
          }, {
            name: 'languageWrittenIn',
            elementName: 'LanguageWrittenIn'
          }, {
            name: 'modelCategory',
            elementName: 'ModelCategory',
            typeInfo: '.ModelCategory'
          }, {
            name: 'status',
            elementName: 'Status'
          }, {
            name: 'objective',
            elementName: 'Objective'
          }, {
            name: 'description',
            elementName: 'Description'
          }]
      }, {
        localName: 'Hazard',
        propertyInfos: [{
            name: 'type',
            elementName: 'Type'
          }, {
            name: 'name',
            required: true,
            elementName: 'Name'
          }, {
            name: 'description',
            elementName: 'Description'
          }, {
            name: 'unit',
            elementName: 'Unit'
          }, {
            name: 'adverseEffect',
            elementName: 'AdverseEffect'
          }, {
            name: 'sourceOfContamination',
            elementName: 'SourceOfContamination'
          }, {
            name: 'benchmarkDose',
            elementName: 'BenchmarkDose'
          }, {
            name: 'maximumResidueLimit',
            elementName: 'MaximumResidueLimit'
          }, {
            name: 'noObservedAdverseAffectLevel',
            elementName: 'NoObservedAdverseAffectLevel'
          }, {
            name: 'lowestObservedAdverseAffectLevel',
            elementName: 'LowestObservedAdverseAffectLevel'
          }, {
            name: 'acceptableOperatorExposureLevel',
            elementName: 'AcceptableOperatorExposureLevel'
          }, {
            name: 'acuteReferenceDose',
            elementName: 'AcuteReferenceDose'
          }, {
            name: 'acceptableDailyIntake',
            elementName: 'AcceptableDailyIntake'
          }, {
            name: 'indSum',
            elementName: 'IndSum'
          }]
      }],
    elementInfos: [{
        typeInfo: '.Document',
        elementName: 'Document'
      }]
  };
  return {
    org_example_genericmodel1_0: org_example_genericmodel1_0
  };
};
if (typeof define === 'function' && define.amd) {
  define([], org_example_genericmodel1_0_Module_Factory);
}
else {
  var org_example_genericmodel1_0_Module = org_example_genericmodel1_0_Module_Factory();
  if (typeof module !== 'undefined' && module.exports) {
    module.exports.org_example_genericmodel1_0 = org_example_genericmodel1_0_Module.org_example_genericmodel1_0;
  }
  else {
    var org_example_genericmodel1_0 = org_example_genericmodel1_0_Module.org_example_genericmodel1_0;
  }
}