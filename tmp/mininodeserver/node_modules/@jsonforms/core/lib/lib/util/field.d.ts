import { RankedTester } from '../testers';
import { StatePropsOfField } from '../util';
import { DispatchPropsOfControl, StatePropsOfScopedRenderer } from './renderer';
/**
 * State props of a field.
 */
export interface StatePropsOfField extends StatePropsOfScopedRenderer {
    className?: string;
    isValid: boolean;
}
/**
 * Props of a field.
 */
export interface FieldProps extends StatePropsOfField, DispatchPropsOfControl {
}
/**
 * Registers the given field renderer when a JSON Forms store is created.
 * @param {RankedTester} tester
 * @param field the field to be registered
 * @returns {any}
 */
export interface DispatchFieldProps extends FieldProps {
    fields?: {
        tester: RankedTester;
        field: any;
    }[];
}
export declare const mapStateToDispatchFieldProps: (state: any) => {
    fields: any;
};
/**
 * Map state to field props.
 *
 * @param state JSONForms state tree
 * @param ownProps any own props
 * @returns {StatePropsOfField} state props of a field
 */
export declare const mapStateToFieldProps: (state: any, ownProps: any) => StatePropsOfField;
/**
 * Synonym for mapDispatchToControlProps.
 *
 * @type {(dispatch) => {handleChange(path, value): void}}
 */
export declare const mapDispatchToFieldProps: (dispatch) => DispatchPropsOfControl;
