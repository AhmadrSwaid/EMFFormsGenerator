import { JsonSchema } from '../models/jsonSchema';
import { RankedTester } from '../testers';
import { UISchemaElement } from '../models/uischema';
import { ErrorObject } from 'ajv';
export interface Labels {
    default: string;
    [additonalLabels: string]: string;
}
export declare const isPlainLabel: (label: string | Labels) => label is string;
/**
 * State-based props of a {@link Renderer}.
 */
export interface StatePropsOfRenderer {
    /**
     * The UI schema to be rendered.
     */
    uischema: UISchemaElement;
    /**
     * The JSON schema that describes the data.
     */
    schema: JsonSchema;
    /**
     * Whether the rendered element should be visible.
     */
    visible?: boolean;
    /**
     * Whether the rendered element should be enabled.
     */
    enabled?: boolean;
    /**
     * Optional instance path. Necessary when the actual data
     * path can not be inferred via the UI schema element as
     * it is the case with nested controls.
     */
    path?: string;
    /**
     * Any configuration options for the element.
     */
    config?: any;
}
/**
 * State-based properties for UI schema elements that have a scope.
 */
export interface StatePropsOfScopedRenderer extends StatePropsOfRenderer {
    /**
     * The data to be rendered.
     */
    data: any;
    /**
     * The absolute dot-separated path to the value being rendered.
     * A path is a sequence of property names separated by dots,
     * e.g. for accessing the value of b in the object
     * { foo: { a: { b: 42 } } }, one would use foo.a.b.
     */
    path: string;
    /**
     * Path of the parent renderer, if any.
     */
    parentPath?: string;
    /**
     * The sub-schema that describes the data this element is bound to.
     */
    scopedSchema: JsonSchema;
    /**
     * An unique ID that can be used to identify the rendered element.
     */
    id: string;
}
/**
 * Props of a {@link Renderer}.
 */
export interface RendererProps extends StatePropsOfRenderer {
}
/**
 * State-based props of a Control
 */
export interface StatePropsOfControl extends StatePropsOfScopedRenderer {
    /**
     * Any validation errors that are caused by the data to be rendered.
     */
    errors: any[];
    /**
     * The label for the rendered element.
     */
    label: string | Labels;
    /**
     * Description of input field
     */
    description?: string;
    /**
     * Whether the rendered data is required.
     */
    required: boolean;
    /**
     * The schema that corresponds to the data the control is bound to.
     */
    scopedSchema: JsonSchema;
}
/**
 * Props of a Control.
 */
export interface ControlProps extends StatePropsOfControl, DispatchPropsOfControl {
}
/**
 * State props of a layout;
 */
export interface StatePropsOfLayout {
    /**
     * All available renderers.
     */
    renderers: any[];
    /**
     * Whether the layout is visible.
     */
    visible: boolean;
    /**
     * Instacne path that is passed to the child elements.
     */
    path: string;
    /**
     * The corresponding UI schema.
     */
    uischema: UISchemaElement;
    /**
     * The JSON schema that is passed to the child elements.
     */
    schema: JsonSchema;
}
/**
 * The state of a control.
 */
export interface ControlState {
    /**
     * The current value.
     */
    value: any;
    /**
     * Whether the control is focused.
     */
    isFocused: boolean;
}
export interface JsonFormsProps extends StatePropsOfScopedRenderer {
    renderers?: {
        tester: RankedTester;
        renderer: any;
    }[];
}
/**
 * Dispatch-based props of a Control.
 */
export interface DispatchPropsOfControl {
    /**
     * Update handler that emits a data change
     *
     * @param {string} path the path to the data to be updated
     * @param {any} value the new value that should be written to the given path
     */
    handleChange(path: string, value: any): any;
}
export declare const mapStateToDispatchRendererProps: (state: any, ownProps: any) => {
    renderers: any;
    schema: any;
    uischema: any;
};
/**
 * Map state to layout props.
 * @param state JSONForms state tree
 * @param ownProps any own props
 * @returns {StatePropsOfLayout}
 */
export declare const mapStateToLayoutProps: (state: any, ownProps: any) => StatePropsOfLayout;
/**
 * Adds an asterisk to the given label string based
 * on the required parameter.
 *
 * @param {string} label the label string
 * @param {boolean} required whether the label belongs to a control which is required
 * @returns {string} the label string
 */
export declare const computeLabel: (label: string, required: boolean) => string;
/**
 * Whether an element's description should be hidden.
 *
 * @param visible whether an element is visible
 * @param description the element's description
 * @param isFocused whether the element is focused
 *
 * @returns {boolean} true, if the description is to be hidden, false otherwise
 */
export declare const isDescriptionHidden: (visible: boolean, description: string, isFocused: boolean) => boolean;
/**
 * Map state to control props.
 * @param state the store's state
 * @param ownProps any own props
 * @returns {StatePropsOfControl} state props for a control
 */
export declare const mapStateToControlProps: (state: any, ownProps: any) => StatePropsOfControl;
/**
 *
 * Map dispatch to control props.
 *
 * @param dispatch the store's dispatch method
 * @returns {DispatchPropsOfControl} dispatch props for a control
 */
export declare const mapDispatchToControlProps: (dispatch: any) => DispatchPropsOfControl;
/**
 * State-based props of a table control.
 */
export interface StatePropsOfTable extends StatePropsOfControl {
    childErrors: ErrorObject[];
}
/**
 * Map state to table props
 *
 * @param state the store's state
 * @param ownProps any element's own props
 * @returns {StatePropsOfTable} state props for a table control
 */
export declare const mapStateToTableControlProps: (state: any, ownProps: any) => StatePropsOfTable;
/**
 * Dispatch props of a table control
 */
export interface DispatchPropsOfTable {
    addItem(path: string): void;
    removeItems(path: string, toDelete: any[]): any;
}
/**
 * Props of a table.
 */
export interface TableControlProps extends StatePropsOfTable, DispatchPropsOfTable {
}
/**
 * Map dispatch to table control props
 *
 * @param dispatch the store's dispatch method
 * @returns {DispatchPropsOfTable} dispatch props for a table control
 */
export declare const mapDispatchToTableControlProps: (dispatch: any) => DispatchPropsOfTable;
