"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const resolvers_1 = require("./resolvers");
const path_1 = require("./path");
exports.composePaths = path_1.compose;
exports.composeWithUi = path_1.composeWithUi;
exports.toDataPath = path_1.toDataPath;
const runtime_1 = require("./runtime");
exports.isEnabled = runtime_1.isEnabled;
exports.isVisible = runtime_1.isVisible;
var label_1 = require("./label");
exports.createLabelDescriptionFrom = label_1.createLabelDescriptionFrom;
/**
 * Escape the given string such that it can be used as a class name,
 * i.e. hashes and slashes will be replaced.
 *
 * @param {string} s the string that should be converted to a valid class name
 * @returns {string} the escaped string
 */
exports.convertToValidClassName = (s) => s.replace('#', 'root')
    .replace(new RegExp('/', 'g'), '_');
exports.formatErrorMessage = errors => {
    if (errors === undefined || errors === null) {
        return '';
    }
    return errors.join('\n');
};
/**
 * Convenience wrapper around resolveData and resolveSchema.
 */
const Resolve = {
    schema: resolvers_1.resolveSchema,
    data: resolvers_1.resolveData
};
exports.Resolve = Resolve;
var resolvers_2 = require("./resolvers");
exports.resolveData = resolvers_2.resolveData;
exports.resolveSchema = resolvers_2.resolveSchema;
// Paths --
const fromScopable = (scopable) => path_1.toDataPathSegments(scopable.scope).join('.');
const Paths = {
    compose: path_1.compose,
    fromScopable
};
exports.Paths = Paths;
// Runtime --
const Runtime = {
    isEnabled: runtime_1.isEnabled,
    isVisible: runtime_1.isVisible,
};
exports.Runtime = Runtime;
__export(require("./renderer"));
__export(require("./field"));
__export(require("./runtime"));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdXRpbC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQXlCQSwyQ0FBeUQ7QUFDekQsaUNBQWdHO0FBNEN2Rix1QkE1Q1csY0FBWSxDQTRDWDtBQUFFLHdCQTVDVyxvQkFBYSxDQTRDWDtBQUFTLHFCQTVDSSxpQkFBVSxDQTRDSjtBQTNDdkQsdUNBQWlEO0FBa0R4QyxvQkFsREEsbUJBQVMsQ0FrREE7QUFBRSxvQkFsREEsbUJBQVMsQ0FrREE7QUFoRDdCLGlDQUFxRDtBQUE1Qyw2Q0FBQSwwQkFBMEIsQ0FBQTtBQUVuQzs7Ozs7O0dBTUc7QUFDVSxRQUFBLHVCQUF1QixHQUFHLENBQUMsQ0FBUyxFQUFVLEVBQUUsQ0FDM0QsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDO0tBQ3BCLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFMUIsUUFBQSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsRUFBRTtJQUN6QyxFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssU0FBUyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sR0FHVDtJQUNGLE1BQU0sRUFBRSx5QkFBYTtJQUNyQixJQUFJLEVBQUUsdUJBQVc7Q0FDbEIsQ0FBQztBQUVPLDBCQUFPO0FBRGhCLHlDQUF5RDtBQUFoRCxrQ0FBQSxXQUFXLENBQUE7QUFBRSxvQ0FBQSxhQUFhLENBQUE7QUFHbkMsV0FBVztBQUNYLE1BQU0sWUFBWSxHQUFHLENBQUMsUUFBa0IsRUFBRSxFQUFFLENBQUMseUJBQWtCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUUxRixNQUFNLEtBQUssR0FBRztJQUNaLE9BQU8sRUFBRSxjQUFZO0lBQ3JCLFlBQVk7Q0FDYixDQUFDO0FBQ29DLHNCQUFLO0FBRTNDLGFBQWE7QUFDYixNQUFNLE9BQU8sR0FBRztJQUNkLFNBQVMsRUFBVCxtQkFBUztJQUNULFNBQVMsRUFBVCxtQkFBUztDQUNWLENBQUM7QUFDNkIsMEJBQU87QUFFdEMsZ0NBQTJCO0FBQzNCLDZCQUF3QjtBQUN4QiwrQkFBMEIifQ==